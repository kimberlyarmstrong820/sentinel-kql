// パラメーター（必要に応じて調整）
let lookbackDays = 90; // IP 履歴を作る期間（日数）
let suspectWindowMins = 60; // サインイン後何分以内の Teams 活動を関連とみなすか（分）
let priorValidWindowDays = 30; // suspect IP が priorValidWindowDays 内に正常サインインがあれば除外
let ipDeltaPctThreshold = 90; // IP 利用差分の閾値（割合）
let ignoreErrorCodes = dynamic(["50173"]); // 除外するサインインのエラーコード


// 1) 指定期間内のサインイン履歴を取得
let signins = SigninLogs
| where TimeGenerated >= ago(lookbackDays * 1d)
| project TimeGenerated, UserPrincipalName, IPAddress = IPAddress, ResultType, AppDisplayName, AuthenticationProtocol;


// 2) ユーザーごとの IP 利用回数を集計して、最大・最小などから差分割合を算出
let ipUsage = signins
| summarize Count = count() by UserPrincipalName, IPAddress
| summarize MaxCount = max(Count), MinCount = min(Count), AllCounts = make_list(pack(IPAddress, Count)) by UserPrincipalName
| extend DeltaPct = iif(MaxCount == 0, 0, 100.0 * (MaxCount - MinCount) / MaxCount)
| where DeltaPct >= ipDeltaPctThreshold
| project UserPrincipalName, DeltaPct, AllCounts;


// 3) 最近の "疑わしいサインイン" を抽出（ここでは各ユーザーの使用頻度が低い IP を候補とする）
let candidateSignins =
signins
| join kind=inner (
ipUsage
| mv-expand AllCounts
| extend tmp = todynamic(AllCounts)
| extend IP = tostring(tmp[0]), Count = toint(tmp[1])
| project UserPrincipalName, IP, Count
) on UserPrincipalName
| where IPAddress == IP
| where ResultType !in (ignoreErrorCodes)
| project SuspectTime = TimeGenerated, UserPrincipalName, SuspectIP = IPAddress, ResultType, AppDisplayName, AuthenticationProtocol;


// 4) さらに除外：SuspectIP が priorValidWindowDays 内に正常サインイン（ResultType == 0）を持つ場合は除外
let filteredSuspects = candidateSignins
| where notexists (
signins
| where TimeGenerated between (SuspectTime - ago(priorValidWindowDays * 1d) .. SuspectTime)
| where UserPrincipalName == candidateSignins.UserPrincipalName and IPAddress == candidateSignins.SuspectIP and ResultType == "0"
| project 1
);


// 5) 該当サインインの直後（suspectWindowMins）に Teams 活動があるかを確認（OfficeActivity を参照）
let teamsEvents = OfficeActivity
| where TimeGenerated >= ago(lookbackDays * 1d)
| where Workload == "MicrosoftTeams" or Operation contains "Teams" or recordType == "Teams"
| project TimeGenerated, UserId = tostring(Actor), Operation, Detail = tostring(todynamic(RawData)["detail"]), OfficeRecord = *;


filteredSuspects
| join kind=leftouter (
teamsEvents
| extend TeamEventTime = TimeGenerated
) on $left.UserPrincipalName == $right.UserId
| where TeamEventTime between (SuspectTime .. SuspectTime + time(suspectWindowMins * 1m))
| project SuspectTime, UserPrincipalName, SuspectIP, ResultType, AppDisplayName, TeamEventTime, Operation, Detail
| order by SuspectTime desc
